/**
 * Created by igorkasyanenko on 10.05.16.
 */
var handlebars = require('handlebars');
var fs = require('fs');
var path = require('path');
var dbModule = require('dbmodule');
var qs = require('querystring');

exports.questionsList = function questionsList(req,res,callback) {

    if(req.method=='POST') {
        var body='';
        req.on('data', function (data) {
            body +=data;
        });
        req.on('end',function(){
         updateQuestions(body);
            dbModule.getAllQuestions(function (error, result) {
                /*
                res.end(initAdminpanelWithData({
                    bodyName: "questionsTable"
                },result));
                */
                callback(null,initAdminpanelWithData({
                    bodyName: "questionsTable"
                },result));

            });

        });
    }else {
        dbModule.getAllQuestions(function (error, result) {
         /*
            res.end(initAdminpanelWithData({
                bodyName: "questionsTable"
            },result));
            */
            callback(null,initAdminpanelWithData({
                bodyName: "questionsTable"
            },result));

        });

    }

    
}


exports.index = function (req,res,callback) {
    
    callback(null,initAdminpanelWithData({
        bodyName: "mainPage"
    },null));
    /*
    res.end(initAdminpanelWithData({
        bodyName: "mainPage"
    },null));
    */
}

function initAdminpanelWithData(context,data) {
    var page = renderDataWithTemplateSync(context, "../views/adminpanel/index.html");
    var template = handlebars.compile(page);
    var html = template(data);
   return html;
}


function updateQuestions(body) {
    var post =  qs.parse(body);
    console.log(post);
    //res.write(body);
    if(post['json']){
        var json = JSON.parse(post['json']);
        var added = json['rows']['added'];
        var deleted = json['rows']['deleted'];
        var updated = json['rows']['updated'];

        added.forEach(function(item, i, arr) {
            dbModule.addQuestion(
                item['updated_time'],
                item['updated_time'],
                item['level'],
                item['text'],
                item['answer1'],
                item['answer2'],
                item['answer3'],
                item['answer4'],
                item['true_answer']);
        });

        deleted.forEach(function(item, i, arr) {
            dbModule.deleteQuestion(
                item['id']);
        });

        updated.forEach(function(item, i, arr) {
            dbModule.updateQuestion(
                item['id'],
                item['updated_time'],
                item['level'],
                item['text'],
                item['answer1'],
                item['answer2'],
                item['answer3'],
                item['answer4'],
                item['true_answer']);
        });
    }

    // dbModule.addQuestion(addDate,updateDate,level,text,ans1,ans2,ans3,ans4,trueAnsw);
    /*
    dbModule.getAllQuestions(function (error, result) {
        data = result;
        renderDataWithTemplate(data,'/views/adminpanel/index.html',res);
    });
    */
}

handlebars.registerHelper('adminpanel_questions_table', function(){
    var localPath = "../views/adminpanel/questionsTable.html";
    return fs.readFileSync(path.join(__dirname, localPath), "utf8");
});
handlebars.registerHelper('adminpanel_header', function(){
    var localPath = "../views/adminpanel/header.html";
    return fs.readFileSync(path.join(__dirname, localPath), "utf8");
});
handlebars.registerHelper('adminpanel_body', function(bodyName){
    return fs.readFileSync(path.join(__dirname, "../views/adminpanel/"+bodyName+".html"), "utf8");
});
handlebars.registerHelper('adminpanel_footer', function(){
    var localPath = "../views/adminpanel/footer.html";
    return fs.readFileSync(path.join(__dirname, localPath), "utf8");
});



function renderDataWithTemplateSync(data,localPath) {
   var buf = fs.readFileSync(path.join(__dirname, localPath), 'utf-8');
            var template = handlebars.compile(buf);
            var html = template(data);
            //  console.log(html);
           return html;
}

function renderDataWithTemplate(data,localPath,res) {
    fs.readFile(path.join(__dirname, localPath), 'utf-8', function(error, source){
        if(error) {
            res.end("error: "+error);
        }
        else {
            var template = handlebars.compile(source);
            var html = template(data);
            //  console.log(html);

            res.end(html);
        }

    });
}