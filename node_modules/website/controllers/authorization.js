/**
 * Created by igorkasyanenko on 13.05.16.
 */
var handlebars = require('handlebars');
var fs = require('fs');
var path = require('path');
var dbModule = require('dbmodule');
var qs = require('querystring');
var crypto = require("crypto");


var sessions = {};

function parseCookies(request) {
    var list = {};
    var rc = request.headers.cookie;

     rc = rc.split(";").forEach(function (cookie) {
        var parts = cookie.split('=');
        list[parts.shift().trim()] = decodeURI(parts.join('='));
    });

    return list;
}

var sessionExpires = 100000;
function removeSession() {
    var now = new Date().getTime();
    for(var SESSID in sessions) {
        if(sessions[SESSID].expires<now){
            delete sessions[SESSID];
        }
    }
    if(Object.keys(sessions).length==0){
        clearInterval(sessionsInterval);
        sessionsInterval=false;
    }
}

var sessionsInterval = false;

function setSession(res,user) {

    if (!sessionsInterval){
        sessionsInterval = setInterval(removeSession,sessionExpires);
    }


    var cookies = [];

    var SESSID = crypto.randomBytes(16).toString('hex');
    cookies.push("SESSID="+SESSID);

    var u = "";

    sessions[SESSID] = {user: user, expires: new Date().getTime()+sessionExpires};

    res.setHeader("Set-Cookie",cookies);
}

exports.checkAccess = checkAccess;

function checkAccess(req) {
    if(req.headers.cookie){
        var cookies = parseCookies(req);
        if( cookies["SESSID"] in sessions && sessions[cookies["SESSID"]].expires >= new Date().getTime()){
            return true;
        }
    }
    return false;
}


exports.login = function login(req, res) {
/*
    if(req.headers.cookie) {
        console.log(JSON.stringify(parseCookies(req)));
        console.log(JSON.stringify(sessions));

    }
    */

    if (req.method == 'POST') {
        var body = '';
        req.on('data', function (data) {
            body += data;
        });
        req.on('end', function () {
            var authString = qs.parse(body);
            if (authString['email'] && authString['password']) {

                dbModule.verifyUser(authString['email'], authString['password'],
                    function (err, user) {

                        if (err) {
                            console.log("error: " + err);
                            res.writeHead(302, {
                                'Location': './auth'
                                //add other headers here...
                            });
                            res.end();

                        } else {

                            // if(req.headers.cookie){
                            //     var cookies = parseCookies(req);
                            //     if(! cookies["SESSID"] in sessions){
                            //         setSession(res,user);
                            //     }
                            // }

                            setSession(res,user);

                            res.writeHead(302, {
                                'Location': './adminpanel'
                                //add other headers here...
                            });
                            res.end();
                        }

                    });
                console.log("body: " + JSON.stringify(body));
            }
        });
    } else {
        res.end(initAuthorizationWithData({
            bodyName: "loginPage"
        }, null));

    }
}


handlebars.registerHelper('authorization_header', function () {
    var localPath = "../views/authorization/header.html";
    return fs.readFileSync(path.join(__dirname, localPath), "utf8");
});

handlebars.registerHelper('authorization_body', function (bodyName) {
    return fs.readFileSync(path.join(__dirname, "../views/authorization/" + bodyName + ".html"), "utf8");
});

handlebars.registerHelper('authorization_footer', function () {
    var localPath = "../views/authorization/footer.html";
    return fs.readFileSync(path.join(__dirname, localPath), "utf8");
});

function renderDataWithTemplateSync(data, localPath) {
    var buf = fs.readFileSync(path.join(__dirname, localPath), 'utf-8');
    var template = handlebars.compile(buf);
    var html = template(data);
    return html;
}

function initAuthorizationWithData(context, data) {
    var page = renderDataWithTemplateSync(context, "../views/authorization/index.html");
    var template = handlebars.compile(page);
    var html = template(data);
    return html;
}
