/**
 * Created by igorkasyanenko on 21.04.16.
 */
var config = require('config');
var pg = require('pg');
var crypto = require("crypto");
//var conString = "postgres://admin:admin@localhost:5432/postgres";
//conString = "postgres://postgres:postgres@localhost:5433/postgres"

var conString = "postgres://"+config.get('postgres')['login']+":"+config.get('postgres')['password']
    +"@"+config.get('postgres')['host']+":"+config.get('postgres')['port']+"/"+config.get('postgres')['db'];
//conString = "postgres://admin:12345@localhost:5432/postgres_db";

var connectionString = process.env.DATABASE_URL || conString;
var client = new pg.Client(connectionString);
client.connect(function(err, client, done) {
    if (err)
        console.log("Postgres: "+err);
    else
    console.log("connected to PGDB");
});


var QUESTIONS_TABLE = "questions";
var QUESTIONS_TABLE_ID = "id";
var QUESTIONS_TABLE_POSTED_TIME = "posted_time";
var QUESTIONS_TABLE_UPDATED_TIME = "updated_time";
var QUESTIONS_TABLE_LEVEL = "level";
var QUESTIONS_TABLE_TEXT = "text";
var QUESTIONS_TABLE_ANSWER1 = "answer1";
var QUESTIONS_TABLE_ANSWER2 = "answer2";
var QUESTIONS_TABLE_ANSWER3 = "answer3";
var QUESTIONS_TABLE_ANSWER4 = "answer4";
var QUESTIONS_TABLE_TRUE_ANSWER = "true_answer";

var USERS_TABLE = "users";
var USERS_TABLE_ID = "id";
var USERS_TABLE_EMAIL = "email";
var USERS_TABLE_PASSWORD = "password";
var USERS_TABLE_SALT = "salt";
var USERS_TABLE_GROUP = "rights";

exports.createTestUsersTable= function createTestUsersTable() {
    client.query("DROP TABLE IF EXISTS "+USERS_TABLE);
    var queryCr = client.query("CREATE TABLE IF NOT EXISTS "+USERS_TABLE+"("
        +USERS_TABLE_ID+" SERIAL PRIMARY KEY, "
        +USERS_TABLE_EMAIL+" TEXT, "
        +USERS_TABLE_PASSWORD+" TEXT, "
        +USERS_TABLE_SALT+" TEXT, "
        +USERS_TABLE_GROUP+" INTEGER)");
    queryCr.on('end', function(result) {
    });

  addUser("admin@mail.ru","admin",0);

}

exports.addUser = addUser;

function addUser(email,password,group) {

    var salt = crypto.randomBytes(16).toString('hex');
    var pass = crypto
        .createHmac("sha256", salt)
        .update(password)
        .digest("hex");

    client.query("INSERT INTO "+USERS_TABLE+"("
        +USERS_TABLE_EMAIL+", "
        +USERS_TABLE_PASSWORD+", "
        +USERS_TABLE_SALT+", "
        +USERS_TABLE_GROUP+") " +
        "VALUES ($1,$2,$3,$4)",[email,pass,salt,group]);
}

exports.verifyUser = verifyUser;

function verifyUser (email,password,callback) {

    var user = null;
    var query = client.query("SELECT "+USERS_TABLE_EMAIL+","+USERS_TABLE_PASSWORD+","+USERS_TABLE_SALT+","+USERS_TABLE_GROUP+" FROM "+USERS_TABLE+" WHERE "+USERS_TABLE_EMAIL+" = $1 ",[email]);
    query.on('row', function(row, result) {
        result.addRow(row);
    });
    query.on('end', function(result) {
        result.rows.forEach(function(row) {
        var salt = row.salt;
        var pass = crypto
            .createHmac("sha256", salt)
            .update(password)
            .digest("hex");

           // console.log(JSON.stringify(row)+" \n row password: "+row.password+ " \n password: "+pass);
            if(row.password==pass){
               user = {email : row.email, rights : row.rights};
            }
        });

        if(!user)
        callback(new Error("user not found "),null);
        else{
            callback(null,user);
        }
        //console.log(result.rows.length + ' rows were received');
    });

    query.on('error', function() {
        callback(new Error('db error'),null);
    })
}

exports.createTestQuestionsTable = function () {
        console.log("postgres : "+config.get('postgres')['db']);
        var date  = new Date();
        var time = date.getTime();
        config.set('lastSyncTime',time);
       // config.set('lastDelTime',time-100);

        console.log("sync : "+config.get('lastSyncTime'));

        
        client.query("DROP TABLE IF EXISTS "+QUESTIONS_TABLE);
        
      
        var queryCr = client.query("CREATE TABLE IF NOT EXISTS "+QUESTIONS_TABLE+"("
            +QUESTIONS_TABLE_ID+" SERIAL PRIMARY KEY, "
            +QUESTIONS_TABLE_POSTED_TIME+" BIGINT, "
            +QUESTIONS_TABLE_UPDATED_TIME+" BIGINT, "
            +QUESTIONS_TABLE_LEVEL+" INTEGER, "
            +QUESTIONS_TABLE_TEXT+" TEXT, "
            +QUESTIONS_TABLE_ANSWER1+" TEXT, "
            +QUESTIONS_TABLE_ANSWER2+" TEXT, "
            +QUESTIONS_TABLE_ANSWER3+" TEXT, "
            +QUESTIONS_TABLE_ANSWER4+" TEXT, "
            +QUESTIONS_TABLE_TRUE_ANSWER+" TEXT)");
        queryCr.on('end', function(result) {

        });

    /*
        var queryIns = client.query("INSERT INTO "+QUESTIONS_TABLE+"("
                +QUESTIONS_TABLE_POSTED_TIME+", "
                +QUESTIONS_TABLE_UPDATED_TIME+", "
                +QUESTIONS_TABLE_LEVEL+", "
                +QUESTIONS_TABLE_TEXT+", "
                +QUESTIONS_TABLE_ANSWER1+", "
                +QUESTIONS_TABLE_ANSWER2+", "
                +QUESTIONS_TABLE_ANSWER3+", "
                +QUESTIONS_TABLE_ANSWER4+", "
                +QUESTIONS_TABLE_TRUE_ANSWER+") VALUES (555555,"+date.getTime()+",1,'dumn how are you?','super','not fine','bad','good',1)");

        client.query("INSERT INTO "+QUESTIONS_TABLE+"("
            +QUESTIONS_TABLE_POSTED_TIME+", "
            +QUESTIONS_TABLE_UPDATED_TIME+", "
            +QUESTIONS_TABLE_LEVEL+", "
            +QUESTIONS_TABLE_TEXT+", "
            +QUESTIONS_TABLE_ANSWER1+", "
            +QUESTIONS_TABLE_ANSWER2+", "
            +QUESTIONS_TABLE_ANSWER3+", "
            +QUESTIONS_TABLE_ANSWER4+", "
            +QUESTIONS_TABLE_TRUE_ANSWER+") VALUES (655555,"+date.getTime()+",2,'what time is it?','12:00','24:00','00:00','12:12',2)");

        client.query("INSERT INTO "+QUESTIONS_TABLE+"("
            +QUESTIONS_TABLE_POSTED_TIME+", "
            +QUESTIONS_TABLE_UPDATED_TIME+", "
            +QUESTIONS_TABLE_LEVEL+", "
            +QUESTIONS_TABLE_TEXT+", "
            +QUESTIONS_TABLE_ANSWER1+", "
            +QUESTIONS_TABLE_ANSWER2+", "
            +QUESTIONS_TABLE_ANSWER3+", "
            +QUESTIONS_TABLE_ANSWER4+", "
            +QUESTIONS_TABLE_TRUE_ANSWER+") VALUES (668555,"+date.getTime()+",7,'how many fingers?','5','10','15','44',1)");

        client.query("INSERT INTO "+QUESTIONS_TABLE+"("
            +QUESTIONS_TABLE_POSTED_TIME+", "
            +QUESTIONS_TABLE_UPDATED_TIME+", "
            +QUESTIONS_TABLE_LEVEL+", "
            +QUESTIONS_TABLE_TEXT+", "
            +QUESTIONS_TABLE_ANSWER1+", "
            +QUESTIONS_TABLE_ANSWER2+", "
            +QUESTIONS_TABLE_ANSWER3+", "
            +QUESTIONS_TABLE_ANSWER4+", "
            +QUESTIONS_TABLE_TRUE_ANSWER+") VALUES (955555,"+date.getTime()+",6,'seo ?','yes','no','ok','bad',1)");


    addQuestion(555555,date.getTime(),2,'dumn how are you?','super','not fine','bad','good',1);
    addQuestion(655555,date.getTime(),2,'what time is it?','12:00','24:00','00:00','12:12',2);
    addQuestion(668555,date.getTime(),7,'how many fingers?','5','10','15','44',1);
    addQuestion(955555,date.getTime(),6,'seo ?','yes','no','ok','bad',1);
*/
    addQuestion(date.getTime()-10000,date.getTime(),1,'Что растёт в огороде?','Лук','Пистолет','Пулемёт','Ракета СС-20',1);
    addQuestion(date.getTime()-10000,date.getTime(),2,
        'Как называют микроавтобусы, совершающие поездки по определённым маршрутам?','Рейсовка','Путёвка','Курсовка','Маршрутка',4);

    addQuestion(date.getTime()-10000,date.getTime(),3,
        'О чём писал Грибоедов, отмечая, что он «нам сладок и приятен» ?','Дым Отечества','Дух купечества','Дар пророчества','Пыл девичества',1);
    addQuestion(date.getTime()-10000,date.getTime(),4,
        'Какого персонажа нет в известной считалке «На золотом крыльце сидели» ?','Сапожника','Кузнеца','Короля','Портного',2);
    addQuestion(date.getTime()-10000,date.getTime(),5,
        'Какой специалист занимается изучением неопознанных летающих объектов?','Кинолог','Уфолог','Сексопатолог','Психиатр',2);
    addQuestion(date.getTime()-10000,date.getTime(),6,
        'Как называется разновидность воды, в которой атом водорода замещён его изотопом дейтерием?','Лёгкая','Средняя','Тяжёлая','Невесомая',3);
    addQuestion(date.getTime()-10000,date.getTime(),7,
        'Что такое десница?','Бровь','Глаз','Шея','Рука',4);



/*
    Что такое десница?
        A: Бровь
    B: Глаз
    C: Шея
    D: Рука
    Правильный ответ — D
    Вопрос 8 (25 000 руб. )

    В какое море впадает река Урал?
        A: Азовское
    B: Чёрное
    C: Средиземное
    D: Каспийское
    Правильный ответ — D
    Окончательный ответ на девятый вопрос
    Вопрос 9 (50 000 руб. )

    На что кладут руку члены английского общества лысых во время присяги?
        A: Баскетбольный мяч
    B: Бильярдный шар
    C: Апельсин
    D: Кокосовый орех
    Правильный ответ — B
    Вопрос 10 (100 000 руб. )

    Как назывался каменный монолит, на котором установлен памятник Петру I в Санкт-Петербурге?
        A: Дом-камень
    B: Гром-камень
    C: Гора-камень
    D: Разрыв-камень
    Правильный ответ — B
    Вопрос про серенаду Чайковского
    Вопрос 11 (200 000 руб. )

    Как Пётр Ильич Чайковский назвал свою серенаду для скрипки с оркестром си-бемоль минор?
        A: Флегматическая
    B: Меланхолическая
    C: Холерическая
    D: Сангвиническая
    Правильный ответ — B
    Вопрос 12 (400 000 руб. )

    Какого ордена не было у первого советского космонавта Юрия Гагарина?
        A: «Ожерелье Нила» (Египет)
    B: «Крест Грюнвальда» (Польша)
    C: «Плайя Хирон» (Куба)
    D: «Орден двойного дракона» (Китай)
    Тимур берёт подсказку Звонок другу: друг не дал ответа за отведённое время.
        Правильный ответ — D
    Тринадцатый вопрос
    Вопрос 13 (800 000 руб. )

    Какое животное имеет второе название — кугуар?
        A: Оцелот
    B: Леопард
    C: Пума
    D: Пантера
    Правильный ответ — C
    Тимур выиграл полтора миллиона!
        Вопрос 14 (1 500 000 руб. )

    Что в России 19 века делали в дортуаре?
        A: Ели
    B: Спали
    C: Ездили верхом
    D: Купались
    Правильный ответ — B
    Помощь зала на последнем вопросе этой игры
    Вопрос 15 (3 000 000 руб. )

    Какой химический элемент назван в честь злого подземного гнома?
        A: Гафний
    B: Кобальт
    C: Бериллий
    D: Теллур
    Тимур решает взять все оставшиеся подсказки.
        Сначала он берёт подсказку Помощь зала: A — 21 %, B — 47 %, C — 8 %, D — 24 %.
    Далее Тимур берёт подсказку 50:50 — остаются варианты B и D.
        Правильный ответ — B
*/
}

function updateTimeDelete() {
    var date  = new Date();
    var time = date.getTime();
    config.set('lastSyncTime',time);
    config.set('lastDelTime',time);
}

function updateTimeUpdateAndAdd() {
    var date  = new Date();
    var time = date.getTime();
    config.set('lastSyncTime',time);
  //  config.set('lastDelTime',time);
    return time;
}

exports.updateTimeUpdateAndAdd = updateTimeUpdateAndAdd;

function addQuestion(addDate,updateDate,level,text,ans1,ans2,ans3,ans4,trueAnsw) {

    var time = updateTimeUpdateAndAdd();

    client.query("INSERT INTO "+QUESTIONS_TABLE+"("
        +QUESTIONS_TABLE_POSTED_TIME+", "
        +QUESTIONS_TABLE_UPDATED_TIME+", "
        +QUESTIONS_TABLE_LEVEL+", "
        +QUESTIONS_TABLE_TEXT+", "
        +QUESTIONS_TABLE_ANSWER1+", "
        +QUESTIONS_TABLE_ANSWER2+", "
        +QUESTIONS_TABLE_ANSWER3+", "
        +QUESTIONS_TABLE_ANSWER4+", "
        +QUESTIONS_TABLE_TRUE_ANSWER+") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)",
        [time,time,level,text,ans1,ans2,ans3,ans4,trueAnsw]);


}

exports.addQuestion = addQuestion;

function updateQuestion(id,updateDate,level,text,ans1,ans2,ans3,ans4,trueAnsw) {
    var time = updateTimeUpdateAndAdd();

    client.query("UPDATE "+QUESTIONS_TABLE+" SET "
        +QUESTIONS_TABLE_UPDATED_TIME+" = $1, "
        +QUESTIONS_TABLE_LEVEL+" = $2, "
        +QUESTIONS_TABLE_TEXT+" = $3, "
        +QUESTIONS_TABLE_ANSWER1+" = $4, "
        +QUESTIONS_TABLE_ANSWER2+" = $5, "
        +QUESTIONS_TABLE_ANSWER3+" = $6, "
        +QUESTIONS_TABLE_ANSWER4+" = $7, "
        +QUESTIONS_TABLE_TRUE_ANSWER+" = $8 " +
        "WHERE "+QUESTIONS_TABLE_ID+" = $9 ",
        [time,level,text,ans1,ans2,ans3,ans4,trueAnsw,id]);

   // updateTimeUpdateAndAdd();
}

exports.updateQuestion = updateQuestion;

function deleteQuestion(id) {
    client.query("DELETE FROM "+QUESTIONS_TABLE +
        " WHERE "+QUESTIONS_TABLE_ID+" = $1",
        [id]);

    updateTimeDelete();
}

exports.deleteQuestion = deleteQuestion;

function getQuestions(time,callback) {
    var queryStr = "SELECT * FROM "+QUESTIONS_TABLE+" WHERE "+QUESTIONS_TABLE_UPDATED_TIME+" >= $1";

    var query = client.query(queryStr,[time]);
    query.on('row', function(row, result) {
        result.addRow(row);
    });
    query.on('end', function(result) {
        callback(null,result.rows);
    });
    query.on('error', function(result) {
        callback(new Error(result),null);
    });
}

exports.getQuestions = getQuestions;

function getAllQuestions(callback) {
    var queryStr = "SELECT * FROM "+QUESTIONS_TABLE;

    var query = client.query(queryStr);
    query.on('row', function(row, result) {
        result.addRow(row);
    });
    query.on('end', function(result) {
        callback(null,result.rows);
    });
    query.on('error', function(result) {
        callback(new Error(result),null);
    });
}

exports.getAllQuestions = getAllQuestions;

/*
function findUser(json, callback) {
    if(json){

       var email =  json.email;
        var pass = json.password;
        var queryStr = "SELECT * FROM "+USERS_TABLE+" WHERE "+USERS_TABLE_EMAIL+" = $1 AND "+USERS_TABLE_PASSWORD+" = $2";

        var query = client.query(queryStr,email,pass);

        query.on('row', function(row, result) {
            result.addRow(row);
        });
        query.on('end', function(result) {
            console.log(result.rows.length + ' rows were received');
            if (result.rows.length>0) {
                callback(null,result.rows[0]);
            }else {
                callback(error, null);
            }

        });

        query.on('error', function(error) {
            //handle the error
            callback(error,null);
        });

    }
}
    */